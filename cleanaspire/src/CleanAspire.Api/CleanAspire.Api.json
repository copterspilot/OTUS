{
  "openapi": "3.0.1",
  "info": {
    "title": "CleanAspire.Api | v1",
    "version": "1.0.0"
  },
  "paths": {
    "/fileManagement/antiforgeryToken": {
      "get": {
        "tags": [
          "File Upload"
        ],
        "summary": "Get Antiforgery Token",
        "description": "Retrieves a new antiforgery token to be used for validating subsequent requests.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AntiforgeryTokenResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/fileManagement/upload": {
      "post": {
        "tags": [
          "File Upload"
        ],
        "summary": "Upload files to the server",
        "description": "Allows uploading multiple files to a specific folder on the server.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileUploadResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/fileManagement/image": {
      "post": {
        "tags": [
          "File Upload"
        ],
        "summary": "Upload images to the server with cropping options",
        "description": "Allows uploading multiple image files with optional cropping options to a specific folder on the server.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "folder",
                  "files"
                ],
                "type": "object",
                "properties": {
                  "folder": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string",
                    "description": "The folder path where the files should be uploaded."
                  },
                  "overwrite": {
                    "type": "boolean",
                    "description": "Indicates whether to overwrite existing files."
                  },
                  "files": {
                    "$ref": "#/components/schemas/IFormFileCollection"
                  },
                  "cropSize_Width": {
                    "type": "integer",
                    "description": "The desired crop size for width the uploaded image.",
                    "format": "int32",
                    "nullable": true
                  },
                  "cropSize_Height": {
                    "type": "integer",
                    "description": "The desired crop size for height the uploaded image.",
                    "format": "int32",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileUploadResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/fileManagement": {
      "get": {
        "tags": [
          "File Upload"
        ],
        "summary": "Download or preview a file from the server",
        "description": "Allows clients to download or preview a file by specifying the folder and file name.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "File Upload"
        ],
        "summary": "Delete a file from the server",
        "description": "Allows clients to delete a file by specifying the folder and file name.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get all products",
        "description": "Returns a list of all products in the system.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Create a new product",
        "description": "Creates a new product with the provided details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update an existing product",
        "description": "Updates the details of an existing product.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete products by IDs",
        "description": "Deletes one or more products by their unique IDs.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProductCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get product by ID",
        "description": "Returns the details of a specific product by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/products/pagination": {
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Get products with pagination",
        "description": "Returns a paginated list of products based on search keywords, page size, and sorting options.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsWithPaginationQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultOfProductDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/products/export": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Export Products to CSV",
        "description": "Exports the product data to a CSV file based on the provided keywords. The CSV file includes product details such as ID, name, description, price, SKU, and category.",
        "parameters": [
          {
            "name": "keywords",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/products/import": {
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Import Products from CSV",
        "description": "Imports product data from one or more CSV files. The CSV files should contain product details in the required format.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileUploadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/stocks/dispatch": {
      "post": {
        "tags": [
          "stocks"
        ],
        "summary": "Dispatch stock",
        "description": "Dispatches a specified quantity of stock from a location.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockDispatchingCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/stocks/receive": {
      "post": {
        "tags": [
          "stocks"
        ],
        "summary": "Receive stock",
        "description": "Receives a specified quantity of stock into a location.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockReceivingCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/stocks/pagination": {
      "post": {
        "tags": [
          "stocks"
        ],
        "summary": "Get stocks with pagination",
        "description": "Returns a paginated list of stocks based on search keywords, page size, and sorting options.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StocksWithPaginationQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultOfStockDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get all tenants",
        "description": "Returns a list of all tenants in the system.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Create a new tenant",
        "description": "Creates a new tenant with the provided details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "Update an existing tenant",
        "description": "Updates the details of an existing tenant.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete tenants by IDs",
        "description": "Deletes one or more tenants by their unique IDs.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/tenants/{id}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get tenant by ID",
        "description": "Returns the details of a specific tenant by their unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          }
        }
      }
    },
    "/webpushr/config": {
      "get": {
        "tags": [
          "webpushr"
        ],
        "summary": "Retrieve current Webpushr configuration",
        "description": "Returns the Webpushr configuration details currently loaded from the application's configuration system. This information includes keys and tokens used for Webpushr push notifications.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebpushrOptions"
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "parameters": [
          {
            "name": "useCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useSessionCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/confirmEmail": {
      "get": {
        "tags": [
          "CleanAspire.Api"
        ],
        "operationId": "MapIdentityApi-/confirmEmail",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changedEmail",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/resendConfirmationEmail": {
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendConfirmationEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/resetPassword": {
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/manage/2fa": {
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/manage/info": {
      "get": {
        "tags": [
          "CleanAspire.Api"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "CleanAspire.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/logout": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Log out the current user.",
        "description": "Logs out the currently authenticated user by signing them out of the system. This endpoint requires the user to be authorized before calling, and returns an HTTP 200 OK response upon successful logout.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/profile": {
      "get": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Retrieve the user's profile",
        "description": "Fetches the profile information of the authenticated user. Returns 404 if the user is not found. Requires authorization.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Update user profile information.",
        "description": "Allows users to update their profile, including username, email, nickname, avatar, time zone, and language code.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/updateEmail": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Update user email address.",
        "description": "Allows users to update their email address and receive a confirmation email if it changes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/signup": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "User Signup",
        "description": "Allows a new user to sign up by providing required details such as email, password, and tenant-specific information. This endpoint creates a new user account and sends a confirmation email for verification.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/account/deleteOwnerAccount": {
      "delete": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Delete own user account.",
        "description": "Allows users to delete their own account permanently.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/confirmEmail": {
      "get": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Confirm Email or Update Email Address",
        "description": "Processes email confirmation or email change requests for a user. It validates the confirmation code, verifies the user ID, and updates the email if a new one is provided. Returns a success message upon successful confirmation or email update.",
        "operationId": "MapIdentityApiAdditionalEndpoints-/account/confirmEmail",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changedEmail",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/google/loginUrl": {
      "get": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Generate Google OAuth 2.0 Login URL",
        "description": "Generates a Google OAuth 2.0 authorization URL for external login, dynamically determining the redirect URI and including the provided state parameter.",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/account/google/signIn": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "External Login with Google OAuth",
        "description": "Handles external login using Google OAuth 2.0. Exchanges an authorization code for tokens, validates the user's identity, and signs the user in.",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/account/microsoft/loginUrl": {
      "get": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Generate Microsoft Azure OAuth 2.0 Login URL",
        "description": "Generates a Microsoft Azure OAuth 2.0 authorization URL for external login, dynamically determining the redirect URI and including the provided state parameter.",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/account/microsoft/signIn": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "External Login with Microsoft Azure OAuth",
        "description": "Handles external login using Microsoft Azure OAuth 2.0. Exchanges an authorization code for tokens, validates the user's identity, and signs the user in.",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/account/generateAuthenticator": {
      "get": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Generate an Authenticator URI and shared key",
        "description": "Generates a shared key and an Authenticator URI for a logged-in user. This endpoint is typically used to configure a TOTP authenticator app, such as Microsoft Authenticator or Google Authenticator.",
        "parameters": [
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/enable2fa": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Enable Authenticator for the user",
        "description": "This endpoint enables Two-Factor Authentication (TOTP) for a logged-in user. The user must first scan the provided QR code using an authenticator app, and then verify the generated code to complete the process.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Enable2faRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/disable2fa": {
      "get": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Disable Two-Factor Authentication for the user",
        "description": "This endpoint disables Two-Factor Authentication (TOTP) for a logged-in user. The user must already have 2FA enabled for this operation to be valid.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/login2fa": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Login with optional two-factor authentication",
        "description": "This endpoint allows users to log in with their email and password. If two-factor authentication is enabled, the user must provide a valid two-factor code or recovery code. Supports persistent cookies or bearer tokens.",
        "parameters": [
          {
            "name": "useCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useSessionCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/account/generateRecoveryCodes": {
      "get": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Generate recovery codes for two-factor authentication.",
        "description": "Generates new recovery codes if two-factor authentication is enabled. Returns 404 if the user is not found or 400 if 2FA is not enabled.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryCodesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryCodesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Identity.Application": [ ]
          }
        ]
      }
    },
    "/account/forgotPassword": {
      "post": {
        "tags": [
          "Authentication",
          "Account Management"
        ],
        "summary": "Request a password reset link",
        "description": "Generates and sends a password reset link to the user's email if the email is registered and confirmed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenResponse": {
        "required": [
          "accessToken",
          "expiresIn",
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "tokenType": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "AntiforgeryTokenResponse": {
        "required": [
          "cookieToken",
          "requestToken",
          "headerName"
        ],
        "type": "object",
        "properties": {
          "cookieToken": {
            "type": "string",
            "nullable": true
          },
          "requestToken": {
            "type": "string",
            "nullable": true
          },
          "headerName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuthenticatorResponse": {
        "required": [
          "sharedKey",
          "authenticatorUri"
        ],
        "type": "object",
        "properties": {
          "sharedKey": {
            "type": "string"
          },
          "authenticatorUri": {
            "type": "string"
          }
        }
      },
      "CreateProductCommand": {
        "required": [
          "sku",
          "name",
          "category",
          "description",
          "price",
          "currency",
          "uom"
        ],
        "type": "object",
        "properties": {
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/NullableOfProductCategoryDto"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "example": {
          "SKU": "ABC123",
          "Name": "Sample Product",
          "Category": "Electronics",
          "Description": "This is a sample product description.",
          "Price": 199,
          "Currency": "USD",
          "UOM": "PCS"
        }
      },
      "CreateTenantCommand": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "DeleteProductCommand": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "DeleteUserRequest": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "Unique username for the user."
          }
        }
      },
      "Enable2faRequest": {
        "required": [
          "appName",
          "verificationCode"
        ],
        "type": "object",
        "properties": {
          "appName": {
            "type": "string",
            "nullable": true
          },
          "verificationCode": {
            "type": "string"
          }
        }
      },
      "FileUploadRequest": {
        "required": [
          "folder",
          "files"
        ],
        "type": "object",
        "properties": {
          "folder": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The folder path where the files should be uploaded."
          },
          "overwrite": {
            "type": "boolean",
            "description": "Indicates whether to overwrite existing files."
          },
          "files": {
            "$ref": "#/components/schemas/IFormFileCollection"
          }
        }
      },
      "FileUploadResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The full URL to access the uploaded file."
          },
          "path": {
            "type": "string",
            "description": "The path where the uploaded file is saved."
          },
          "size": {
            "type": "integer",
            "description": "The size of the uploaded file in bytes.",
            "format": "int64"
          }
        }
      },
      "ForgotPasswordRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "IFormFile": {
        "type": "string",
        "format": "binary"
      },
      "IFormFileCollection": {
        "minItems": 1,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/IFormFile"
        },
        "description": "The list of files to be uploaded."
      },
      "InfoRequest": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "oldPassword": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "InfoResponse": {
        "required": [
          "email",
          "isEmailConfirmed"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "isEmailConfirmed": {
            "type": "boolean"
          }
        }
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "twoFactorRecoveryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "example": {
          "email": "administrator",
          "password": "P@ssw0rd!"
        }
      },
      "NullableOfProductCategoryDto": {
        "enum": [
          "Electronics",
          "Furniture",
          "Clothing",
          "Food",
          "Beverages",
          "HealthCare",
          "Sports",
          null
        ],
        "nullable": true
      },
      "PaginatedResultOfProductDto": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDto"
            }
          }
        }
      },
      "PaginatedResultOfStockDto": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockDto"
            }
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProductDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/NullableOfProductCategoryDto"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProductDto2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/NullableOfProductCategoryDto"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          }
        },
        "nullable": true
      },
      "ProductsWithPaginationQuery": {
        "required": [
          "keywords"
        ],
        "type": "object",
        "properties": {
          "keywords": {
            "type": "string"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "default": 15
          },
          "orderBy": {
            "type": "string",
            "default": "Id"
          },
          "sortDirection": {
            "type": "string",
            "default": "Descending"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "cacheKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProfileRequest": {
        "required": [
          "username",
          "email"
        ],
        "type": "object",
        "properties": {
          "nickname": {
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "User's preferred nickname.",
            "nullable": true
          },
          "username": {
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "Unique username for the user."
          },
          "email": {
            "maxLength": 80,
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
            "type": "string",
            "description": "User's email address. Must be in a valid email format."
          },
          "avatarUrl": {
            "type": "string",
            "description": "User uploads an avatar image.",
            "nullable": true
          },
          "timeZoneId": {
            "maxLength": 50,
            "type": "string",
            "description": "User's time zone identifier, e.g., 'UTC', 'America/New_York'.",
            "nullable": true
          },
          "languageCode": {
            "maxLength": 10,
            "pattern": "^[a-z]{2,3}(-[A-Z]{2})?$",
            "type": "string",
            "description": "User's preferred language code, e.g., 'en-US'.",
            "nullable": true
          },
          "superiorId": {
            "maxLength": 50,
            "type": "string",
            "description": "Tenant identifier for multi-tenant systems. Must be a GUID in version 7 format.",
            "nullable": true
          },
          "tenantId": {
            "maxLength": 50,
            "type": "string",
            "description": "Tenant identifier for multi-tenant systems. Must be a GUID in version 7 format.",
            "nullable": true
          }
        }
      },
      "ProfileResponse": {
        "required": [
          "userId",
          "username",
          "email",
          "isEmailConfirmed"
        ],
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isEmailConfirmed": {
            "type": "boolean"
          },
          "timeZoneId": {
            "type": "string",
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "nullable": true
          },
          "superiorId": {
            "type": "string",
            "nullable": true
          },
          "isTwoFactorEnabled": {
            "type": "boolean"
          }
        }
      },
      "RecoveryCodesResponse": {
        "required": [
          "codes"
        ],
        "type": "object",
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RefreshRequest": {
        "required": [
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "RegisterRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "email": "Hunter.Kovacek57@gmail.com",
          "password": "P@ssw0rd!"
        }
      },
      "ResendConfirmationEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "ResetPasswordRequest": {
        "required": [
          "email",
          "resetCode",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "resetCode": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "SignupRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 80,
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
            "type": "string",
            "description": "User's email address. Must be in a valid email format."
          },
          "password": {
            "maxLength": 20,
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,50}$",
            "type": "string",
            "description": "User's password. Must meet the security criteria."
          },
          "nickname": {
            "maxLength": 50,
            "type": "string",
            "description": "User's preferred nickname.",
            "nullable": true
          },
          "provider": {
            "maxLength": 20,
            "type": "string",
            "description": "Authentication provider, e.g., Local or Google.",
            "nullable": true
          },
          "tenantId": {
            "maxLength": 50,
            "type": "string",
            "description": "Tenant identifier for multi-tenant systems. Must be a GUID in version 7 format.",
            "nullable": true
          },
          "timeZoneId": {
            "maxLength": 50,
            "type": "string",
            "description": "User's time zone identifier, e.g., 'UTC', 'America/New_York'.",
            "nullable": true
          },
          "languageCode": {
            "maxLength": 10,
            "pattern": "^[a-z]{2,3}(-[A-Z]{2})?$",
            "type": "string",
            "description": "User's preferred language code, e.g., 'en-US'.",
            "nullable": true
          }
        },
        "example": {
          "Email": "Syble_Conn@gmail.com",
          "Password": "P@ssw0rd!",
          "Nickname": "exampleNickname",
          "Provider": "Local",
          "TenantId": "123e4567-e89b-47d3-a456-426614174000",
          "TimeZoneId": "Russian Standard Time",
          "LanguageCode": "en-US"
        }
      },
      "StockDispatchingCommand": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "location": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "example": {
          "ProductId": "d3f1c647-5107-4f40-905e-28db44b006d6",
          "Quantity": 5,
          "Location": "WH-01"
        }
      },
      "StockDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "productId": {
            "type": "string",
            "nullable": true
          },
          "product": {
            "$ref": "#/components/schemas/ProductDto2"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "location": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "StockReceivingCommand": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "location": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "example": {
          "ProductId": "3e80814a-5850-4f97-a27c-8075aed16f07",
          "Quantity": 10,
          "Location": "WH-01"
        }
      },
      "StocksWithPaginationQuery": {
        "required": [
          "keywords"
        ],
        "type": "object",
        "properties": {
          "keywords": {
            "type": "string"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "default": 15
          },
          "orderBy": {
            "type": "string",
            "default": "Id"
          },
          "sortDirection": {
            "type": "string",
            "default": "Descending"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "cacheKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TenantDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TwoFactorRequest": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "resetSharedKey": {
            "type": "boolean"
          },
          "resetRecoveryCodes": {
            "type": "boolean"
          },
          "forgetMachine": {
            "type": "boolean"
          }
        }
      },
      "TwoFactorResponse": {
        "required": [
          "sharedKey",
          "recoveryCodesLeft",
          "isTwoFactorEnabled",
          "isMachineRemembered"
        ],
        "type": "object",
        "properties": {
          "sharedKey": {
            "type": "string"
          },
          "recoveryCodesLeft": {
            "type": "integer",
            "format": "int32"
          },
          "recoveryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isTwoFactorEnabled": {
            "type": "boolean"
          },
          "isMachineRemembered": {
            "type": "boolean"
          }
        }
      },
      "Unit": {
        "type": "object"
      },
      "UpdateEmailRequest": {
        "required": [
          "newEmail"
        ],
        "type": "object",
        "properties": {
          "newEmail": {
            "maxLength": 80,
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
            "type": "string",
            "description": "The new email address. Must be in a valid email format."
          }
        }
      },
      "UpdateProductCommand": {
        "required": [
          "id",
          "sku",
          "name",
          "category",
          "description",
          "price",
          "currency",
          "uom"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/NullableOfProductCategoryDto"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "example": {
          "Id": "0198d779-ee86-784a-9065-067403fdf600",
          "SKU": "ABC123",
          "Name": "Sample Product",
          "Category": "Electronics",
          "Description": "This is a sample product description.",
          "Price": 199,
          "Currency": "USD",
          "UOM": "PCS"
        }
      },
      "UpdateTenantCommand": {
        "required": [
          "id",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "WebpushrOptions": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Identity.Application": {
        "type": "apiKey",
        "description": "Use this cookie to authenticate the user.",
        "name": "Identity.Application",
        "in": "cookie"
      }
    }
  },
  "tags": [
    {
      "name": "File Upload"
    },
    {
      "name": "products"
    },
    {
      "name": "stocks"
    },
    {
      "name": "tenants"
    },
    {
      "name": "webpushr"
    },
    {
      "name": "CleanAspire.Api"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Account Management"
    }
  ]
}